/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mediafilesecurity.ui;

import java.io.File;
import mediafilesecurity.encryptions.EncryptionProcessorType;
import mediafilesecurity.utilities.FileChooserDelegate;
import mediafilesecurity.listener.OnDialogActionListener;
import mediafilesecurity.listener.OnProgressListener;
import mediafilesecurity.processor.ViewFileBytesAsString;
import mediafilesecurity.utilities.FileUtils;
import mediafilesecurity.utilities.FormatConverter;
import mediafilesecurity.utilities.JOPtionUtils;
import mediafilesecurity.utilities.TextUtils;

/**
 *
 * @author filippo
 */
public class MainWindow extends javax.swing.JFrame implements OnProgressListener {

    private final FileChooserDelegate chooserDelegate;
    private final ViewFileBytesAsString viewFileBytesAsString;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        this.buttonStop.setEnabled(false);
        this.chooserDelegate = new FileChooserDelegate();
        this.viewFileBytesAsString = new ViewFileBytesAsString(this);
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        processProgress = new javax.swing.JProgressBar();
        jPanel1 = new javax.swing.JPanel();
        encryptButton = new javax.swing.JButton();
        selectFileButton = new javax.swing.JButton();
        fileLocationPath = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        processTime = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        throughputTime = new javax.swing.JLabel();
        printProcessCheckBox = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        processMonitor = new javax.swing.JTextArea();
        viewInBinaryButton = new javax.swing.JButton();
        buttonStop = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        processProgress.setStringPainted(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Processor Configs"));

        encryptButton.setText("Process File");
        encryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptButtonActionPerformed(evt);
            }
        });

        selectFileButton.setText("Select File");
        selectFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFileButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Process time:");

        processTime.setText("-");

        jLabel2.setText("Throughput:");

        throughputTime.setText("-");

        printProcessCheckBox.setText("Print Binary after process");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(selectFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileLocationPath)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(encryptButton))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(processTime)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(throughputTime)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(printProcessCheckBox)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectFileButton)
                    .addComponent(fileLocationPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(encryptButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(processTime)
                    .addComponent(jLabel2)
                    .addComponent(throughputTime)
                    .addComponent(printProcessCheckBox))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        processMonitor.setColumns(20);
        processMonitor.setLineWrap(true);
        processMonitor.setRows(5);
        jScrollPane1.setViewportView(processMonitor);

        viewInBinaryButton.setText("View in Binary");
        viewInBinaryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewInBinaryButtonActionPerformed(evt);
            }
        });

        buttonStop.setText("Stop Printing");
        buttonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(processProgress, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 706, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(buttonStop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(viewInBinaryButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(viewInBinaryButton)
                        .addGap(1, 1, 1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(buttonStop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(processProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFileButtonActionPerformed
        //open JFileChooser and select file
        //just specify path
        //this.chooserDelegate.showSaveFileChooser(this, new File("abc.xml"));
        File selectedFile = this.chooserDelegate.showOpenFileChooser(MainWindow.this);
        if (selectedFile != null) {
            fileLocationPath.setText(selectedFile.getAbsolutePath());

            //System.out.println(Arrays.toString(fileAsBytes));
            System.out.println("Done");
        }
    }//GEN-LAST:event_selectFileButtonActionPerformed

    private void encryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptButtonActionPerformed
        //FileSecurityProcessor processor = new FileSecurityProcessor(command)
        final String filePath = fileLocationPath.getText();
        if (!TextUtils.isEmpty(filePath)) {
            EncryptionOptionModalDialog dialog = new EncryptionOptionModalDialog(this, true);
            dialog.setDialogActionListener(new OnDialogActionListener() {
                @Override
                public void onStartProcess(String encryptionKey, String encryptionAlgorithm, boolean encrypt) {
                    EncryptionProcessorType type = EncryptionProcessorType.fromString(encryptionAlgorithm);
                    if (encrypt) {
                        handleEncryption(type, encryptionKey, filePath);
                    } else {
                        handleDecryption(type, encryptionKey, filePath);
                    }
                }
            });
            dialog.setTitle("Please select encryption");
            dialog.setLocationRelativeTo(this);
            dialog.setVisible(true);

        } else {
            JOPtionUtils.showWarningMessage("Please select a file to encrypt.");
        }
    }//GEN-LAST:event_encryptButtonActionPerformed

    private void viewInBinaryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewInBinaryButtonActionPerformed

        final String filePath = fileLocationPath.getText();
        if (TextUtils.isEmpty(filePath)) {
            JOPtionUtils.showWarningMessage("Please select a file to view as binary.");
            return;
        }
        processMonitor.setText(null);

        printByteIntoMonitor(FileUtils.getFileAsBytes(new File(filePath)));
    }//GEN-LAST:event_viewInBinaryButtonActionPerformed

    private void buttonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStopActionPerformed
        viewFileBytesAsString.stopProcess();
        buttonStop.setEnabled(false);
        processProgress.setValue(0);
    }//GEN-LAST:event_buttonStopActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonStop;
    private javax.swing.JButton encryptButton;
    private javax.swing.JTextField fileLocationPath;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox printProcessCheckBox;
    private javax.swing.JTextArea processMonitor;
    private javax.swing.JProgressBar processProgress;
    private javax.swing.JLabel processTime;
    private javax.swing.JButton selectFileButton;
    private javax.swing.JLabel throughputTime;
    private javax.swing.JButton viewInBinaryButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onProgressUpdate(int progressVal, byte b) {
        processProgress.setValue(progressVal);
        processMonitor.append(FormatConverter.getByteBinaryString(b) + " , ");
    }

    @Override
    public void onProgressStarted() {
        processMonitor.append("[ ");
    }

    @Override
    public void onProgressComplete(int progress) {
        processProgress.setValue(100);
        processMonitor.append(" ]");
        buttonStop.setEnabled(false);
    }

    @Override
    public void onProgressInterrupted() {
        processMonitor.append("Progress interrupted!");
        buttonStop.setEnabled(false);
    }

    private void handleDecryption(EncryptionProcessorType type, String encryptionKey, String filePath) {
        byte[] fileBytes = FileUtils.getFileAsBytes(new File(filePath));
        File file = new File(filePath);
        byte[] decrypted = null;
        long startTime = 0;
        long endTime = 0;
        switch (type) {
            case AES:
                startTime = System.currentTimeMillis();
                decrypted = type.AES.decrypt(encryptionKey, fileBytes);
                endTime = System.currentTimeMillis();
                break;
            case DES:
                startTime = System.currentTimeMillis();
                decrypted = type.DES.decrypt(encryptionKey, fileBytes);
                endTime = System.currentTimeMillis();
                break;
            case BLOWFISH:
                startTime = System.currentTimeMillis();
                decrypted = type.BLOWFISH.decrypt(encryptionKey, fileBytes);
                endTime = System.currentTimeMillis();
                break;
        }

        long differnce = endTime - startTime;
        processTime.setText(String.valueOf(differnce) + "ms");

        if (decrypted != null) {
            int dl = decrypted.length;
            if (dl == 0) {
                dl = 1;
            }
            double tpt = (dl / differnce);
            throughputTime.setText(String.valueOf(tpt) + " byte/ms");
            if (printProcessCheckBox.isSelected()) {
                printByteIntoMonitor(decrypted);
            }
        }

        String absolutePath = file.getAbsolutePath().substring(0, file.getAbsolutePath().lastIndexOf(File.separator));
        String fileName = file.getName();
        if (fileName.endsWith(".enc")) {
            fileName = FileUtils.getFileBaseName(fileName);
        }

        FileUtils.writeFile(new File(absolutePath + "/decrypted#" + fileName), decrypted);
        System.out.println("Decrypted.");
    }

    private void handleEncryption(EncryptionProcessorType type, String encryptionKey, String filePath) {
        byte[] fileBytes = FileUtils.getFileAsBytes(new File(filePath));
        File file = new File(filePath);
        byte[] encrypted = null;

        long startTime = 0;
        long endTime = 0;

        switch (type) {
            case AES:
                startTime = System.currentTimeMillis();
                encrypted = type.AES.encrypt(encryptionKey, fileBytes);
                endTime = System.currentTimeMillis();
                break;
            case DES:
                startTime = System.currentTimeMillis();
                encrypted = type.DES.encrypt(encryptionKey, fileBytes);
                endTime = System.currentTimeMillis();
                break;
            case BLOWFISH:
                startTime = System.currentTimeMillis();
                encrypted = type.BLOWFISH.encrypt(encryptionKey, fileBytes);
                endTime = System.currentTimeMillis();
                break;
        }

        long differnce = endTime - startTime;
        processTime.setText(String.valueOf(differnce) + "ms");

        if (encrypted != null) {
            int el = encrypted.length;
            if (el == 0) {
                el = 1;
            }
            double tpt = (el / differnce);
            throughputTime.setText(String.valueOf(tpt) + " byte/ms");
            if (printProcessCheckBox.isSelected()) {
                printByteIntoMonitor(encrypted);
            }
        }

        String selectedPath = chooserDelegate.showSaveFileChooser(MainWindow.this, file);
        if (selectedPath != null) {
            FileUtils.writeFile(new File(selectedPath.concat(".enc")), encrypted);
        }
    }

    private void printByteIntoMonitor(byte[] fileAsBytes) {
        viewFileBytesAsString.stopProcess();
        viewFileBytesAsString.setBytesToDisplay(fileAsBytes);
        viewFileBytesAsString.startProcess();
        buttonStop.setEnabled(true);
    }
}
